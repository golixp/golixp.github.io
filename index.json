[{"content":"","date":"2024-09-12","externalUrl":null,"permalink":"/","section":"Lixp的Blog","summary":"","title":"Lixp的Blog","type":"page"},{"content":"","date":"2024-09-12","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"一次ubuntu Linux机器内存溢出强行重启机器, 启动后docker的容器和镜像全部消失, 后台还有容器相关进程在运行, apt重装docker, 容器和镜像全部都能看到了, 然后在某次正常重启后, 又消失了, 网上查询了很多方式, 都不行, 最后发现是因为snap安装的docker和apt安装的docker共存导致的.\ndocker info可以看到:\nClient: Version: 24.0.7 Context: default Debug Mode: false Server: Containers: 0 Running: 0 Paused: 0 Stopped: 0 Images: 0 Server Version: 24.0.5 Storage Driver: overlay2 Backing Filesystem: btrfs Supports d_type: true Using metacopy: false Native Overlay Diff: true userxattr: false Logging Driver: json-file Cgroup Driver: systemd Cgroup Version: 2 Plugins: Volume: local Network: bridge host ipvlan macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog Swarm: inactive Runtimes: io.containerd.runc.v2 runc Default Runtime: runc Init Binary: docker-init containerd version: 3dce8eb055cbb6872793272b4f20ed16117344f8 runc version: init version: de40ad0 Security Options: apparmor seccomp Profile: builtin cgroupns Kernel Version: 6.8.0-41-generic Operating System: Ubuntu Core 22 OSType: linux Architecture: x86_64 CPUs: 8 Total Memory: 7.524GiB Name: alpha01 ID: 2595f729-554d-43f0-ad76-6d9578678fc9 Docker Root Dir: /var/snap/docker/common/var-lib-docker Debug Mode: false Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: false 可以看到Docker Root Dir: /var/snap/docker/common/var-lib-docker, 表示现在docker cli连接的是snap的docker, 而不是apt安装的docker, 所以容器和镜像都是空的, 可能是内存溢出发生了一些错误, 导致/var/run/docker.sock指向了snap的docker, snap list docker查看, 确实有docker服务在运行\n执行命令:\nsudo snap stop docker sudo snap remove docker sudo rm -rf /var/snap/docker snap list docker检查, 没有输出即为删除成功, sudo systemctl restart docker.service 重启后, 执行docker ps和docker images检查, 可以看到输出.\n","date":"2024-09-12","externalUrl":null,"permalink":"/posts/ubuntu%E7%9A%84docker%E5%AE%B9%E5%99%A8%E5%92%8C%E9%95%9C%E5%83%8F%E6%B6%88%E5%A4%B1/","section":"Posts","summary":"\u003cp\u003e一次ubuntu Linux机器内存溢出强行重启机器, 启动后docker的容器和镜像全部消失, 后台还有容器相关进程在运行, apt重装docker, 容器和镜像全部都能看到了, 然后在某次正常重启后, 又消失了, 网上查询了很多方式, 都不行, 最后发现是因为snap安装的docker和apt安装的docker共存导致的.\u003c/p\u003e","title":"Ubuntu的Docker容器和镜像消失","type":"posts"},{"content":"开机报错:\nerror: unknown filesystem. grub rescue\u0026gt; 无法进入系统引导页面, 这是grub恢复模式.\n使用ls查看磁盘, 会出现:\n(hd0) (hd0,msdos2) (hd0,msdos1) 或者\n(hd0) (hd0,gpt2) (hd0,gpt1) 上面是mbr引导, 下面是gpt引导.\n然后使用ls (hd0,gpt2)或者ls (hd0,2)来查看各个引导分区.\n大部分分区都会报错unknown filesystem, 直到不是这个报错为止.\n加入你找到的是(hd0,2):\nset root=(hd0,2) set profix=(hd0,2)/boot/grub/ 如果你是Btrfs系统, 需要这样执行:\nset root=(hd0,2) set profix=(hd0,2)/@/boot/grub/ 因为Btrfs文件系统会把/目录挂载到一个卷上面, 如果不确定是哪个, 可以使用 ls (hd0,2)/-\u0026gt;ls (hd0,2)/@-\u0026gt;... 逐级查看目录, 直到找到/boot目录.\n之后执行命令:\ninsmod normal normal 这样就会进入到Grub引导界面, 进入Linux系统后, 执行命令:\nsudo grub-mkconfig -o /boot/grub/grub.cfg sudo grub-install /dev/nvme0n1p4 这样会重建grub引导, 如果不确定/目录在哪个分区, 使用df命令查看:\n文件系统 大小 已用 可用 已用% 挂载点 dev 16G 0 16G 0% /dev run 16G 11M 16G 1% /run efivarfs 192K 146K 42K 78% /sys/firmware/efi/efivars /dev/nvme0n1p4 471G 96G 370G 21% / tmpfs 16G 14M 16G 1% /dev/shm tmpfs 1.0M 0 1.0M 0% /run/credentials/systemd-journald.service tmpfs 1.0M 0 1.0M 0% /run/credentials/systemd-udev-load-credentials.service tmpfs 1.0M 0 1.0M 0% /run/credentials/systemd-tmpfiles-setup-dev-early.service tmpfs 1.0M 0 1.0M 0% /run/credentials/systemd-sysctl.service tmpfs 1.0M 0 1.0M 0% /run/credentials/systemd-tmpfiles-setup-dev.service tmpfs 1.0M 0 1.0M 0% /run/credentials/systemd-vconsole-setup.service tmpfs 16G 5.2M 16G 1% /tmp /dev/nvme0n1p4 471G 96G 370G 21% /var/tmp /dev/nvme0n1p4 471G 96G 370G 21% /srv /dev/nvme0n1p4 471G 96G 370G 21% /root /dev/nvme0n1p4 471G 96G 370G 21% /var/log /dev/nvme0n1p4 471G 96G 370G 21% /var/cache /dev/nvme0n1p4 471G 96G 370G 21% /home /dev/nvme0n1p1 96M 27M 70M 29% /boot/efi tmpfs 1.0M 0 1.0M 0% /run/credentials/systemd-tmpfiles-setup.service tmpfs 3.2G 172K 3.2G 1% /run/user/1000 可以看到我的/目录在/dev/nvme0n1p4\n","date":"2024-07-11","externalUrl":null,"permalink":"/posts/grub2%E5%BC%95%E5%AF%BC%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/","section":"Posts","summary":"\u003cp\u003e开机报错:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eerror: unknown filesystem.\ngrub rescue\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e无法进入系统引导页面, 这是grub恢复模式.\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003els\u003c/code\u003e查看磁盘, 会出现:\u003c/p\u003e","title":"Btrfs + Grub2 报错: error: Unknown Filesystem. Grub Rescue\u003e","type":"posts"},{"content":"# 安装 curl -s https://install.zerotier.com | sudo bash # 设置 zerotier 开机自启 systemctl enable zerotier-one.service # 启动 zerotier 服务 systemctl start zerotier-one.service # 加入网络 zerotier-cli join xxxxx # 加入中继 zerotier-cli orbit xxxx xxxx 搭建moon中继服务 # 首先:\ncd /var/lib/zerotier-one 生成中继配置:\nzerotier-idtool initmoon identity.public \u0026gt;\u0026gt; moon.json 如果报错: dentity.public is not a valid identity, 则执行:\nzerotier-idtool generate zerotier-idtool generate identity.secret identity.public # 然后继续正常流程 zerotier-idtool initmoon identity.public \u0026gt;\u0026gt; moon.json 生成的文件类似:\n{ \u0026#34;id\u0026#34;: \u0026#34;xxx\u0026#34;, \u0026#34;objtype\u0026#34;: \u0026#34;world\u0026#34;, \u0026#34;roots\u0026#34;: [ { \u0026#34;identity\u0026#34;: \u0026#34;xxx\u0026#34;, \u0026#34;stableEndpoints\u0026#34;: [ \u0026#34;公网ip/端口\u0026#34; ] } ], \u0026#34;signingKey\u0026#34;: \u0026#34;xxx\u0026#34;, \u0026#34;signingKey_SECRET\u0026#34;: \u0026#34;xxx\u0026#34;, \u0026#34;updatesMustBeSignedBy\u0026#34;: \u0026#34;xxx\u0026#34;, \u0026#34;worldType\u0026#34;: \u0026#34;moon\u0026#34; } 修改其中的stableEndpoints值为你公网服务器IP\n然后:\n# 生成文件 zerotier-idtool genmoon moon.json # 放入配置 mkdir moons.d cp *.moon moons.d/ # 重启 systemctl restart zerotier-one.service 目录下有xxxxxxxxx.moon文件, 记住id, 然后:\nzerotier-cli orbit xxxxxxxxx xxxxxxxxx ","date":"2024-07-01","externalUrl":null,"permalink":"/posts/draft/zerotier%E5%AE%89%E8%A3%85/","section":"Posts","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecurl -s https://install.zerotier.com \u003cspan class=\"p\"\u003e|\u003c/span\u003e sudo bash\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 设置 zerotier 开机自启\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esystemctl \u003cspan class=\"nb\"\u003eenable\u003c/span\u003e zerotier-one.service\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 启动 zerotier 服务\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esystemctl start zerotier-one.service\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 加入网络\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ezerotier-cli join xxxxx\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 加入中继\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ezerotier-cli orbit xxxx xxxx\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c!-- zerotier-cli join e3918db4837426e5 --\u003e\n\u003c!-- zerotier-cli orbit 00bdcdfc1b 00bdcdfc1b --\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e搭建moon中继服务 \n    \u003cdiv id=\"%E6%90%AD%E5%BB%BAmoon%E4%B8%AD%E7%BB%A7%E6%9C%8D%E5%8A%A1\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%90%AD%E5%BB%BAmoon%E4%B8%AD%E7%BB%A7%E6%9C%8D%E5%8A%A1\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e首先:\u003c/p\u003e","title":"Zerotier安装","type":"posts"},{"content":"Linux KDE桌面环境下挂载NTFS格式移动硬盘失败, 经过检查是因为硬盘某些区块数据是drity的, 通过以下命令修复:\nsudo ntfsfix -d /dev/sda1 注意硬盘路径改为目标硬盘分区.\n","date":"2024-05-13","externalUrl":null,"permalink":"/posts/linux%E6%97%A0%E6%B3%95%E6%8C%82%E8%BD%BDntfs%E7%A1%AC%E7%9B%98/","section":"Posts","summary":"\u003cp\u003eLinux KDE桌面环境下挂载NTFS格式移动硬盘失败, 经过检查是因为硬盘某些区块数据是drity的, 通过以下命令修复:\u003c/p\u003e","title":"Linux无法挂载NTFS硬盘","type":"posts"},{"content":" 前言 # 平常经常遇到不知道局域网内服务器ip, 需要使用端口扫描来确定服务器ip的情况, 需要端口扫描的解决方案.\nnmap # nmap是最流行的端口扫描工具, 使用方法:\nsudo nmap -sT -p 22 192.168.10.0-255 输出:\nStarting Nmap 7.94 ( https://nmap.org ) at 2024-04-25 16:08 CST Nmap scan report for 192.168.10.0 Host is up (0.00018s latency). PORT STATE SERVICE 22/tcp open ssh MAC Address: 4C:CC:6A:C3:3D:52 (Micro-Star Intl) Nmap scan report for 192.168.10.1 Host is up (0.00040s latency). PORT STATE SERVICE 22/tcp closed ssh MAC Address: F4:DE:AF:DB:9C:9B (Huawei Technologies) Nmap scan report for 192.168.10.5 Host is up (0.17s latency). PORT STATE SERVICE 22/tcp filtered ssh MAC Address: 34:7D:F6:62:5D:EF (Intel Corporate) Nmap scan report for 192.168.10.9 Host is up (0.13s latency). PORT STATE SERVICE 22/tcp filtered ssh MAC Address: CC:D9:AC:03:1B:D2 (Intel Corporate) 经过体验速度较慢, 但是根据官网文档所述, 功能很多, 适合针对确定的ip和域名扫描.\nmasscan # masscan是c语言编写的端口扫描工具, 主打速度快, 需要自行编译或使用包管理器安装, 使用:\nsudo masscan -p22 192.168.10.0/24 输出:\nStarting masscan 1.3.2 (http://bit.ly/14GZzcT) at 2024-04-25 08:17:30 GMT Initiating SYN Stealth Scan Scanning 256 hosts [1 port/host] Discovered open port 22/tcp on 192.168.10.199 Discovered open port 22/tcp on 192.168.10.229 Discovered open port 22/tcp on 192.168.10.65 速度很快, 默认每秒100个数据包, 通过添加--max-rate参数可以加快扫描速度:\nsudo masscan -p22 192.168.0.0/16 --max-rate 100000 但是它不支持域名扫描, 也不支持udp, 优点是速度很快, 可以和nmap结合使用.\nzmap # zmap和masscan一样是为了ipv4全网扫描的工具, 同样主打速度快, 同样不提供二进制文件, 使用:\nsudo zmap -p22 192.168.10.0/24 报错:\nApr 25 17:31:46.236 [INFO] zmap: By default, ZMap will output the unique IP addresses of hosts that respond successfully (e.g., SYN-ACK packet). This is equivalent to running ZMap with the following flags: --output-module=csv --output-fields=saddr --output-filter=\u0026#39;success=1 \u0026amp;\u0026amp; repeat=0\u0026#39; --no-header-row. If you want all responses, explicitly set an output module or set --output-filter=\u0026#34;\u0026#34;. Apr 25 17:31:46.236 [WARN] blocklist: ZMap is currently using the default blocklist located at /etc/zmap/blocklist.conf. By default, this blocklist excludes locally scoped networks (e.g. 10.0.0.0/8, 127.0.0.1/8, and 192.168.0.0/16). If you are trying to scan local networks, you can change the default blocklist by editing the default ZMap configuration at /etc/zmap/blocklist.conf. If you have modified the default blocklist, you can ignore this message. Apr 25 17:31:46.237 [ERROR] blocklist: no addresses are eligible to be scanned in the current configuration. This may be because the blocklist being used by ZMap (/etc/zmap/blocklist.conf) prevents any addresses from receiving probe packets. Apr 25 17:31:46.237 [FATAL] zmap: unable to initialize blocklist / allowlist 看起来zmap默认是不允许扫描局域网的.\nnaabu # naabu是go语言编写的端口扫描工具, 相比masscan需要用make编译安装(或者用包管理器下载), naabu的编译安装更加友好, 且官方有编译好的二进制文件提供.\n使用方式:\nsudo naabu -p 22 -host 192.168.10.0/24 输出:\n__ ___ ___ ___ _/ / __ __ / _ \\/ _ \\/ _ \\/ _ \\/ // / /_//_/\\_,_/\\_,_/_.__/\\_,_/ projectdiscovery.io [INF] Current naabu version 2.3.0 (latest) [INF] Running host discovery scan [INF] Running SYN scan with CAP_NET_RAW privileges 192.168.10.212:80 192.168.10.212:443 [INF] Found 3 ports on host 192.168.10.212 (192.168.10.212) 速度也很快.\nRustScan # RustScan如其名是rust编写的端口扫描工具, 社区文档写得很好, 官方也提供windows和linux的二进制文件, 速度保持很快的同时, 支持很多现代化的特性, 比如支持Python/Lua/Shell脚本集成, 官方文档说支持自适应学习, \u0026ldquo;越用越流畅\u0026rdquo;. 还支持无障碍, 这很酷.\n使用:\nrustscan -a 192.168.10.0/24 -p22 先是输出了扫描到的端口, 然后报了一大堆警告, 和调用nmap的输出, 看起来很杂乱. 经过查询, 得知默认rustscan会将扫描的的机器端口再传入nmap扫描, 使得数据更准确, 可以加上-g参数禁止传入nmap:\nrustscan -a 192.168.10.0/24 -p22 --ulimit 5000 -g 输出结果很纯净:\n192.168.10.93 -\u0026gt; [22] 192.168.10.65 -\u0026gt; [22] 192.168.10.47 -\u0026gt; [22] 192.168.10.192 -\u0026gt; [22] 192.168.10.229 -\u0026gt; [22] 192.168.10.212 -\u0026gt; [22] 192.168.10.0 -\u0026gt; [22] 192.168.10.11 -\u0026gt; [22] 据文档说, 是为了方便grep过滤的模式.\n总结 # nmap最流行, 功能最强大, 但是扫描速度非常慢; masscan和zmap类似, 主打速度快, 不提供编译好的文件, 使用起来感觉masscan更友好一点; naabu是有公司驱动的开源项目, 使用go编写, 使用和输出都比较简单; rustscan是社区驱动的端口扫描软件, 功能丰富, 主要思路是先用rustscan初筛然后放入nmap详细扫描.\n","date":"2024-04-25","externalUrl":null,"permalink":"/posts/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e前言 \n    \u003cdiv id=\"%E5%89%8D%E8%A8%80\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e平常经常遇到不知道局域网内服务器ip, 需要使用端口扫描来确定服务器ip的情况, 需要端口扫描的解决方案.\u003c/p\u003e","title":"端口扫描工具","type":"posts"},{"content":" 安装 # pkg install openssh 运行 # 由于Termux没有systemd, 每次需要手动启动sshd\nsshd 发现报错:\nCANNOT LINK EXECUTABLE \u0026#34;sshd\u0026#34;: library \u0026#34;libcrypto.so.3\u0026#34; not found: needed by main executable 安装opessl:\npkg install openssl 报错:\nsshd: no hostkeys available -- exiting. 查资料得知执行:\nssh-keygen -A 再次运行即可\n连接 # 基于安全策略, Termux的sshd只允许ssh-key登录, 将ssh公钥传输到手机, 然后:\n# 如果没有目录则创建 mkdir .ssh # 添加公钥到authorized_keys文件最后一行 echo \u0026#34;ssh-rsa xxx= user\u0026#34; \u0026gt;\u0026gt; .ssh/authorized_keys 如果客户机也安装了sshd, 也可以:\nmkdir .ssh ssh user@host \u0026#34;cat ~/.ssh/id_rsa.pub\u0026#34; \u0026gt;\u0026gt; ~/.ssh/authorized_keys Termux依然需要设置密码, 执行:\npasswd 查看用户名:\nwhoami 查看ip:\nifconfig 连接:\nssh -p 8022 user@host 之后u输入密码即可连接, 注意端口为8022, 而不是22.\n","date":"2024-04-23","externalUrl":null,"permalink":"/posts/termux%E5%AE%89%E8%A3%85ssh/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e安装 \n    \u003cdiv id=\"%E5%AE%89%E8%A3%85\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%AE%89%E8%A3%85\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epkg install openssh\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch2 class=\"relative group\"\u003e运行 \n    \u003cdiv id=\"%E8%BF%90%E8%A1%8C\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%BF%90%E8%A1%8C\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e由于Termux没有systemd, 每次需要手动启动sshd\u003c/p\u003e","title":"Termux安装ssh","type":"posts"},{"content":"docker中安装yolo-v8运行报错:\nImportError: libGL.so.1: cannot open shared object file: No such file or directory 查询发现为opencv包缺少动态链接库依赖, 使用apt下载opencv所有系统依赖:\napt install python3-opencv 下载之后重新运行即可.\n","date":"2024-04-23","externalUrl":null,"permalink":"/posts/docker%E4%B8%ADpython%E6%8A%A5%E9%94%99importerrorlibgl.so.1/","section":"Posts","summary":"\u003cp\u003edocker中安装yolo-v8运行报错:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eImportError: libGL.so.1: cannot open shared object file: No such file or directory\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e查询发现为opencv包缺少动态链接库依赖, 使用apt下载opencv所有系统依赖:\u003c/p\u003e","title":"Docker中Python报错 ImportError: libGL.so.1: cannot open shared object file: No such file or directory","type":"posts"},{"content":" 现象 # 在服务器外部启动gradio, 输入一个mp4视频, 输出一个avi格式视频, 简单代码如下:\nif __name__ == \u0026#39;__main__\u0026#39;: input = gr.Video() output = gr.Video() ... iface = gr.Interface( fn=pcwp, inputs=input, outputs=output, ) uvicorn.run( gr.mount_gradio_app(FastAPI(), iface, path=\u0026#34;\u0026#34;), host=\u0026#34;0.0.0.0\u0026#34;, port=9120 ) 在conda环境下可以正常运行, 打包为docker容器无法播放output视频, 代码完全相同.\n排查 # 首先print出工作目录和视频路径, 检查后无问题, 然后将视频改为绝对路径, 依然无法播放.\nF12打开网络请求记录, 查看conda环境服务播放的视频来自磁盘缓存, 勾选不使用缓存, 然后重新请求, 发现仍然可以播放.\n对比conda服务和docker服务的请求列表, 发现conda中有带ffmpeg字样的请求, 尝试在docker环境中安装ffmpeg:\ndocker exec -it container_name bash # 进入容器shell apt install ffmpeg docker restart container_name后重新尝试请求docker服务, 发现视频可以正常播放.\n","date":"2024-04-23","externalUrl":null,"permalink":"/posts/gradio%E6%92%AD%E6%94%BE%E8%BF%94%E5%9B%9E.avi%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91%E6%97%A0%E6%B3%95%E6%92%AD%E6%94%BE%E9%97%AE%E9%A2%98/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e现象 \n    \u003cdiv id=\"%E7%8E%B0%E8%B1%A1\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E7%8E%B0%E8%B1%A1\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e在服务器外部启动gradio, 输入一个mp4视频, 输出一个avi格式视频, 简单代码如下:\u003c/p\u003e","title":"Gradio播放返回.avi格式视频无法播放问题","type":"posts"},{"content":"首先安装termux-api:\npkg install termux-api 之后执行:\ntermux-setup-storage 之后手机会弹出Termux请求访问内部存储, 允许之后, 会生成~/storage, 它是一个符号链接, 指向手机内部存储.\n","date":"2024-04-22","externalUrl":null,"permalink":"/posts/termux%E8%AE%BF%E9%97%AE%E6%89%8B%E6%9C%BA%E5%86%85%E9%83%A8%E5%AD%98%E5%82%A8/","section":"Posts","summary":"\u003cp\u003e首先安装\u003ccode\u003etermux-api\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epkg install termux-api\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e之后执行:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etermux-setup-storage\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e之后手机会弹出Termux请求访问内部存储, 允许之后, 会生成\u003ccode\u003e~/storage\u003c/code\u003e, 它是一个符号链接, 指向手机内部存储.\u003c/p\u003e","title":"Termux访问手机内部存储","type":"posts"},{"content":"Termux换源非常简单, 执行\u0026quot;termux-change-repo, 在cli图形界面选择要更换的源即可.\n","date":"2024-04-22","externalUrl":null,"permalink":"/posts/termux%E6%8D%A2%E6%BA%90/","section":"Posts","summary":"\u003cp\u003eTermux换源非常简单, 执行\u0026quot;\u003ccode\u003etermux-change-repo\u003c/code\u003e, 在cli图形界面选择要更换的源即可.\u003c/p\u003e","title":"Termux换源","type":"posts"},{"content":" 新建用户 # sudo adduser newuser # 修改密码 sudo passwd newuser # 授予sudo权限 sudo usermod -aG sudo newuser 为用户添加公钥 # 使用ssh-keygen -t rsa -C \u0026quot;newuser\u0026quot; 命令生成一对公私钥, 在服务器上将公钥内容添加到authorized_keys中.\n# 如果没有目录则创建 mkdir .ssh # 添加公钥到authorized_keys文件最后一行 echo \u0026#34;ssh-rsa xxx= newuser\u0026#34; \u0026gt;\u0026gt; .ssh/authorized_keys 禁止用户密码登录 # 编辑sshd配置文件sudo vim /etc/ssh/sshd_config, 在其中添加内容:\nMatch User username PasswordAuthentication no 保存退出后重启ssh服务:\nsudo systemctl restart ssh ","date":"2024-04-19","externalUrl":null,"permalink":"/posts/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9B%E5%BB%BA%E4%BD%8E%E6%9D%83%E9%99%90%E7%94%A8%E6%88%B7%E5%B9%B6%E7%A6%81%E6%AD%A2%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e新建用户 \n    \u003cdiv id=\"%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo adduser newuser\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 修改密码\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo passwd newuser\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 授予sudo权限\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo usermod -aG sudo newuser\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch2 class=\"relative group\"\u003e为用户添加公钥 \n    \u003cdiv id=\"%E4%B8%BA%E7%94%A8%E6%88%B7%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%B8%BA%E7%94%A8%E6%88%B7%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e使用\u003ccode\u003essh-keygen -t rsa -C \u0026quot;newuser\u0026quot; \u003c/code\u003e命令生成一对公私钥, 在服务器上将公钥内容添加到\u003ccode\u003eauthorized_keys\u003c/code\u003e中.\u003c/p\u003e","title":"Linux服务器创建低权限用户并禁止密码登录","type":"posts"},{"content":"默认配置下的git在修改包含中文内容的时候, 会出现如下情况:\n位于分支 writer 您的分支与上游分支 \u0026#39;origin/writer\u0026#39; 一致。 尚未暂存以备提交的变更： （使用 \u0026#34;git add \u0026lt;文件\u0026gt;...\u0026#34; 更新要提交的内容） （使用 \u0026#34;git restore \u0026lt;文件\u0026gt;...\u0026#34; 丢弃工作区的改动） 修改： .gitignore 修改： \u0026#34;content/posts/\\346\\265\\213\\350\\257\\225\\346\\226\\207\\347\\253\\240.md\u0026#34; 修改尚未加入提交（使用 \u0026#34;git add\u0026#34; 和/或 \u0026#34;git commit -a\u0026#34;） 可以看到中文显示为ASCII编码, 这是由于Git的core.quotepath配置默认是true, 它会将所有非ASCII字符转换为ASCII编码，因此中文路径和文件名会显示为不可读的字符。\n使用命令git config --global core.quotepath false可以不将非ASCII字符的文件名进行编码转换, 更改后显示如下:\n位于分支 writer 您的分支与上游分支 \u0026#39;origin/writer\u0026#39; 一致。 尚未暂存以备提交的变更： （使用 \u0026#34;git add \u0026lt;文件\u0026gt;...\u0026#34; 更新要提交的内容） （使用 \u0026#34;git restore \u0026lt;文件\u0026gt;...\u0026#34; 丢弃工作区的改动） 修改： .gitignore 修改： content/posts/测试文章.md 修改尚未加入提交（使用 \u0026#34;git add\u0026#34; 和/或 \u0026#34;git commit -a\u0026#34;） ","date":"2024-04-16","externalUrl":null,"permalink":"/posts/%E7%BB%88%E7%AB%AF%E4%B8%ADgit%E4%BF%A1%E6%81%AF%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B8%BAascii%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/","section":"Posts","summary":"\u003cp\u003e默认配置下的git在修改包含中文内容的时候, 会出现如下情况:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e位于分支 writer\n您的分支与上游分支 \u0026#39;origin/writer\u0026#39; 一致。\n\n尚未暂存以备提交的变更：\n  （使用 \u0026#34;git add \u0026lt;文件\u0026gt;...\u0026#34; 更新要提交的内容）\n  （使用 \u0026#34;git restore \u0026lt;文件\u0026gt;...\u0026#34; 丢弃工作区的改动）\n        修改：     .gitignore\n        修改：     \u0026#34;content/posts/\\346\\265\\213\\350\\257\\225\\346\\226\\207\\347\\253\\240.md\u0026#34;\n\n修改尚未加入提交（使用 \u0026#34;git add\u0026#34; 和/或 \u0026#34;git commit -a\u0026#34;）\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到中文显示为ASCII编码, 这是由于Git的\u003ccode\u003ecore.quotepath\u003c/code\u003e配置默认是\u003ccode\u003etrue\u003c/code\u003e, 它会将所有非ASCII字符转换为ASCII编码，因此中文路径和文件名会显示为不可读的字符。\u003c/p\u003e","title":"终端中git信息中文显示为ASCII编码问题","type":"posts"},{"content":"编辑文件~/.config/kwalletrc:\n[Auto Deny] kdewallet=codium 在其中加入你需要启动的应用名称\n","date":"2024-04-16","externalUrl":null,"permalink":"/posts/kde%E4%B8%AD%E6%AF%8F%E6%AC%A1%E5%90%AF%E5%8A%A8%E5%BA%94%E7%94%A8%E9%83%BD%E7%94%B3%E8%AF%B7%E5%BC%80%E5%90%AFkdewallet%E7%9A%84%E9%97%AE%E9%A2%98/","section":"Posts","summary":"\u003cp\u003e编辑文件\u003ccode\u003e~/.config/kwalletrc\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-ini\" data-lang=\"ini\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003e[Auto Deny]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"na\"\u003ekdewallet\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003ecodium\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在其中加入你需要启动的应用名称\u003c/p\u003e","title":"KDE中每次启动应用都申请开启kdewallet的问题","type":"posts"},{"content":"今天push的时候看到仓库有些commit是使用公司的邮箱提交的, 需要修改所有历史commit中的提交作者信息\nfilter-branch # 查询网上信息发现了filter-branch脚本, 如下:\n#!/bin/sh git filter-branch --env-filter \u0026#39; OLD_EMAIL=\u0026#34;旧邮箱\u0026#34; CORRECT_NAME=\u0026#34;新名字\u0026#34; CORRECT_EMAIL=\u0026#34;新邮箱\u0026#34; if [ \u0026#34;$GIT_COMMITTER_EMAIL\u0026#34; = \u0026#34;$OLD_EMAIL\u0026#34; ] then export GIT_COMMITTER_NAME=\u0026#34;$CORRECT_NAME\u0026#34; export GIT_COMMITTER_EMAIL=\u0026#34;$CORRECT_EMAIL\u0026#34; fi if [ \u0026#34;$GIT_AUTHOR_EMAIL\u0026#34; = \u0026#34;$OLD_EMAIL\u0026#34; ] then export GIT_AUTHOR_NAME=\u0026#34;$CORRECT_NAME\u0026#34; export GIT_AUTHOR_EMAIL=\u0026#34;$CORRECT_EMAIL\u0026#34; fi \u0026#39; --tag-name-filter cat -- --branches --tags 修改信息运行后报警告:\nWARNING: git-filter-branch has a glut of gotchas generating mangled history rewrites. Hit Ctrl-C before proceeding to abort, then use an alternative filtering tool such as \u0026#39;git filter-repo\u0026#39; (https://github.com/newren/git-filter-repo/) instead. See the filter-branch manual page for more details; to squelch this warning, set FILTER_BRANCH_SQUELCH_WARNING=1. Proceeding with filter-branch... Rewrite 256e869ada89ce0adae33aa01a732c9a71b00992 (1/1) (0 seconds passed, remaining 0 predicted) Ref \u0026#39;refs/heads/master\u0026#39; was rewritten 查询后发现git-filter-branch已被官方弃用, 改用新的基于Python3编写的工具 git-filter-repo.\ngit-filter-repo # 需要通过pip install git-filter-repo安装\n之后运行命令:\ngit filter-repo \\ --email-callback \u0026#39; return email if email != b\u0026#34;OLD_EMAIL\u0026#34; else b\u0026#34;NEW_EMAIL\u0026#34; \u0026#39; \\ --name-callback \u0026#39;return name.replace(b\u0026#34;OLD_AUTHOR\u0026#34;, b\u0026#34;NEW_AUTHOR\u0026#34;)\u0026#39; \\ --force 总结 # 经过尝试之后, 发现不论是filter-branch还是git-filter-repo都无法去除远程仓库中的所有提交信息, 在.git中还是会保留, 然而直接删除.git的相关内容会导致某些历史的文件损坏, 所以放弃修改, 除了看commit历史的时候有些不顺眼之外也没什么影响.\n","date":"2024-04-16","externalUrl":null,"permalink":"/posts/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9git%E4%BB%93%E5%BA%93%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF/","section":"Posts","summary":"\u003cp\u003e今天push的时候看到仓库有些commit是使用公司的邮箱提交的, 需要修改所有历史commit中的提交作者信息\u003c/p\u003e","title":"批量修改git仓库历史提交作者信息","type":"posts"},{"content":" 需求 # 现有两个目录, 其中图片image/source/目录部分内容:\n-rw-r--r-- 1 root root 632719 May 16 2023 20230516091500_8ea8f4755ab211ed864a0050569539e0.jpg -rw-r--r-- 1 root root 165811 May 16 2023 20230516091500_9535f376ca0611ed9d690050569539e0.jpg -rw-r--r-- 1 root root 282415 May 16 2023 20230516091500_a08f20f9cdf111ed9d690050569539e0.jpg ... 音频目录audio部分内容:\ndrwxr-xr-x 2 root root 4096 Apr 1 15:33 ffe4db567548a8852daa715ef23336b8 drwxr-xr-x 2 root root 12288 Mar 12 18:18 fff75084e08309e56bbb6034f00ca75d drwxr-xr-x 2 root root 4096 Oct 31 15:33 fffd822ac90a7546cf5ab457c8a1ca64 ... 音频目录下一个子目录audio/fffd822ac90a7546cf5ab457c8a1ca64下内容:\n-rw-r--r-- 1 root root 176090 Oct 31 15:30 20231031152954_e25e2be5ba9011ed9d690050569539e0.wav -rw-r--r-- 1 root root 176090 Oct 31 15:32 20231031153154_e25e2be5ba9011ed9d690050569539e0.wav -rw-r--r-- 1 root root 176090 Oct 31 15:34 20231031153354_e25e2be5ba9011ed9d690050569539e0.wav ... 其中image/source/目录下文件名中的uuid代表摄像头id, 与audio子目录下wav文件的文件名中的uuid含义一致, 但是与audio目录下的子目录名称无关.\n现要求将两个目录下相近时间记录的音频和图片一一对应.\n例如: 20231031091500_a08f20f9cdf111ed9d690050569539e0.jpg 与 20231031091454_a08f20f9cdf111ed9d690050569539e0.wav 对应.\n提取文件列表 # 首先用find命令提取完整的audio所有子目录文件列表\nfind audio/ -type f \u0026gt; audio.txt 文件内容:\naudio/140cb49659d4105009c8c8ca4d539cd9/20231020195154_547a1f69ca0611ed9d690050569539e0.wav audio/140cb49659d4105009c8c8ca4d539cd9/20231020193554_547a1f69ca0611ed9d690050569539e0.wav audio/140cb49659d4105009c8c8ca4d539cd9/20231020202754_547a1f69ca0611ed9d690050569539e0.wav image/source/目录下是完整的文件列表, 没有子目录层级, 所以使用ls命令提取:\nls -1 image/source/ \u0026gt; img.txt 文件内容:\n20230303153200_b999967758c411ed864a0050569539e0.jpg 20230305084000_3103656d5ab511ed864a0050569539e0.jpg 20230305084000_3a4bb49e5ab511ed864a0050569539e0.jpg 解析文件名 # 由观察可以得知文件名称格式固定, 由14位日期+32位uuid+后缀构成. 编写解析函数:\n直接切割:\ndef split(s): return (s[0:14], s[15:48], s[-3:]) 根据符号切割:\ndef split(s): return ( s[0 : s.find(\u0026#34;_\u0026#34;)], s[s.find(\u0026#34;_\u0026#34;) + 1 : s.find(\u0026#34;.\u0026#34;)], s[s.find(\u0026#34;.\u0026#34;) + 1 :] ) 运行:\nprint(split(\u0026#34;20230303153200_b999967758c411ed864a0050569539e0.jpg\u0026#34;)) 输出:\n(\u0026#39;20230303153200\u0026#39;, \u0026#39;b999967758c411ed864a0050569539e0\u0026#39;, \u0026#39;jpg\u0026#39;) 提取特征 # 由于要对比20231031091500_a08f20f9cdf111ed9d690050569539e0.jpg 与 20231031091454_a08f20f9cdf111ed9d690050569539e0.wav 这种对应关系, 只需要让音频文件精确到分钟的时间+1分钟等于图片的时间即为同时的图片, 将精确到分钟的时间和后面的uuid拼接为字符串, 字符串相等, 图片和音频就对应上了.\n处理images目录文件列表 # 文件较小, 不到60MB, 不需要优化内存占用, 所以直接加载到内存在内存处理\ndef img(): with open(\u0026#34;匹配图片/img.txt\u0026#34;, \u0026#34;r\u0026#34;) as f: # 读取并去除换行符 data = f.read().splitlines() res = dict() for i in data: timestamp, uuid, _ = split(i) trait = timestamp[:-2] + uuid res[trait] = i return res 解析audio目录文件列表 # 和images目录类似, 需要注意处理文件路径, 还有时间+1分钟需要转换为时间对象, 这样可以比较方便地进行60进制运算.\ndef audio(): with open(\u0026#34;匹配图片/audio.txt\u0026#34;, \u0026#34;r\u0026#34;) as f: # 读取并去除换行符 data = f.read().splitlines() res = dict() for i in data: timestamp, uuid, _ = split(i[i.rfind(\u0026#34;/\u0026#34;) + 1 :]) # 将时间+1分钟 date_time = datetime.strptime(timestamp, r\u0026#34;%Y%m%d%H%M%S\u0026#34;) + timedelta(minutes=1) timestamp = date_time.strftime(r\u0026#34;%Y%m%d%H%M%S\u0026#34;) trait = timestamp[:-2] + uuid res[trait] = i return res 比较两个目录文件列表 # imgd = img() audiod = audio() res = list() for key, value in audiod.items(): if key in imgd: res.append((\u0026#34;image/source/\u0026#34; + imgd[key], value)) print(res) 复制文件 # for i in res: _, uuid, _ = split(i[0][i[0].rfind(\u0026#34;/\u0026#34;) + 1 :]) target = Path(f\u0026#34;data/{uuid}\u0026#34;) target.mkdir(parents=True, exist_ok=True) shutil.copy(i[0], target) shutil.copy(i[1], target) 最终代码 # import shutil from datetime import datetime, timedelta from pathlib import Path def split(s): return (s[0 : s.find(\u0026#34;_\u0026#34;)], s[s.find(\u0026#34;_\u0026#34;) + 1 : s.find(\u0026#34;.\u0026#34;)], s[s.find(\u0026#34;.\u0026#34;) + 1 :]) def img(): with open(\u0026#34;img.txt\u0026#34;, \u0026#34;r\u0026#34;) as f: # 读取并去除换行符 data = f.read().splitlines() res = dict() for i in data: timestamp, uuid, _ = split(i) trait = timestamp[:-2] + uuid res[trait] = i return res def audio(): with open(\u0026#34;audio.txt\u0026#34;, \u0026#34;r\u0026#34;) as f: # 读取并去除换行符 data = f.read().splitlines() res = dict() for i in data: timestamp, uuid, _ = split(i[i.rfind(\u0026#34;/\u0026#34;) + 1 :]) # 将时间+1分钟 date_time = datetime.strptime(timestamp, r\u0026#34;%Y%m%d%H%M%S\u0026#34;) + timedelta(minutes=1) timestamp = date_time.strftime(r\u0026#34;%Y%m%d%H%M%S\u0026#34;) trait = timestamp[:-2] + uuid res[trait] = i return res if __name__ == \u0026#34;__main__\u0026#34;: imgd = img() audiod = audio() res = list() for key, value in audiod.items(): if key in imgd: res.append((\u0026#34;image/source/\u0026#34; + imgd[key], value)) print(res) ... # 复制文件 for i in res: _, uuid, _ = split(i[0][i[0].rfind(\u0026#34;/\u0026#34;) + 1 :]) target = Path(f\u0026#34;data/{uuid}\u0026#34;) target.mkdir(parents=True, exist_ok=True) shutil.copy(i[0], target) shutil.copy(i[1], target) ","date":"2024-04-16","externalUrl":null,"permalink":"/posts/python%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-%E5%8C%B9%E9%85%8D%E5%90%8C%E6%97%B6%E9%97%B4%E6%AE%B5%E7%9A%84%E9%9F%B3%E9%A2%91%E5%92%8C%E5%9B%BE%E7%89%87/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e需求 \n    \u003cdiv id=\"%E9%9C%80%E6%B1%82\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E9%9C%80%E6%B1%82\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e现有两个目录, 其中图片\u003ccode\u003eimage/source/\u003c/code\u003e目录部分内容:\u003c/p\u003e","title":"Python脚本编写-匹配同时间段的音频和图片","type":"posts"},{"content":" 创建conda环境 # conda create -n moused python=3.10 进入conda环境 # conda activate moused 配置环境 # mkdir moused cd moused pip install ultralytics 预测 # yolo detect predict model=yolov8x.pt source=mouse.mp4 效果并不好, 需要使用自定义数据集微调.\n使用自定义数据集微调 # 经过挑选, 下载安装X-AnyLabeling作为数据标注工具, 截取一些有老鼠的图像, 并且标注检测框, 标注完成后, 新建一个标签文件classes.txt, 内容如下:\nmouse 选择导出为yolo标签, 会在图片目录同级出现labels目录.\n拆分训练集 # 将image目录和labels目录放到一个data目录下, 然后运行如下代码:\nimport os import random import shutil # 设置随机数种子 random.seed(123) # 定义文件夹路径 root_dir = \u0026#39;data\u0026#39; image_dir = os.path.join(root_dir, \u0026#39;images\u0026#39;) label_dir = os.path.join(root_dir, \u0026#39;labels\u0026#39;) output_dir = \u0026#39;dataset\u0026#39; # 定义训练集、验证集和测试集比例 train_ratio = 0.7 valid_ratio = 0.15 test_ratio = 0.15 # 获取所有图像文件和标签文件的文件名（不包括文件扩展名） image_filenames = [os.path.splitext(f)[0] for f in os.listdir(image_dir)] label_filenames = [os.path.splitext(f)[0] for f in os.listdir(label_dir)] # 随机打乱文件名列表 random.shuffle(image_filenames) # 计算训练集、验证集和测试集的数量 total_count = len(image_filenames) train_count = int(total_count * train_ratio) valid_count = int(total_count * valid_ratio) test_count = total_count - train_count - valid_count # 定义输出文件夹路径 train_image_dir = os.path.join(output_dir, \u0026#39;train\u0026#39;, \u0026#39;images\u0026#39;) train_label_dir = os.path.join(output_dir, \u0026#39;train\u0026#39;, \u0026#39;labels\u0026#39;) valid_image_dir = os.path.join(output_dir, \u0026#39;valid\u0026#39;, \u0026#39;images\u0026#39;) valid_label_dir = os.path.join(output_dir, \u0026#39;valid\u0026#39;, \u0026#39;labels\u0026#39;) test_image_dir = os.path.join(output_dir, \u0026#39;test\u0026#39;, \u0026#39;images\u0026#39;) test_label_dir = os.path.join(output_dir, \u0026#39;test\u0026#39;, \u0026#39;labels\u0026#39;) # 创建输出文件夹 os.makedirs(train_image_dir, exist_ok=True) os.makedirs(train_label_dir, exist_ok=True) os.makedirs(valid_image_dir, exist_ok=True) os.makedirs(valid_label_dir, exist_ok=True) os.makedirs(test_image_dir, exist_ok=True) os.makedirs(test_label_dir, exist_ok=True) # 将图像和标签文件划分到不同的数据集中 for i, filename in enumerate(image_filenames): if i \u0026lt; train_count: output_image_dir = train_image_dir output_label_dir = train_label_dir elif i \u0026lt; train_count + valid_count: output_image_dir = valid_image_dir output_label_dir = valid_label_dir else: output_image_dir = test_image_dir output_label_dir = test_label_dir # 复制图像文件 src_image_path = os.path.join(image_dir, filename + \u0026#39;.png\u0026#39;) dst_image_path = os.path.join(output_image_dir, filename + \u0026#39;.png\u0026#39;) shutil.copy(src_image_path, dst_image_path) # 复制标签文件 src_label_path = os.path.join(label_dir, filename + \u0026#39;.txt\u0026#39;) dst_label_path = os.path.join(output_label_dir, filename + \u0026#39;.txt\u0026#39;) shutil.copy(src_label_path, dst_label_path) 将拆分出训练集/验证集/测试集.\n训练 # 创建data.yml文件, 内容如下:\ntrain: /home/user/moused/dataset/train # train images (relative to \u0026#39;path\u0026#39;) 128 images val: /home/user/moused/dataset/valid # val images (relative to \u0026#39;path\u0026#39;) 128 images test: /home/user/moused/dataset/test # test images (optional) # Classes names: 0: mouse 运行命令yolo detect train data=data.yml model=yolov8x.pt epochs=100 imgsz=640, 将开始训练.\n预测 # yolo detect predict model=runs/detect/train/weights/best.pt source=mouse.mp4 效果还不错\n","date":"2024-04-15","externalUrl":null,"permalink":"/posts/%E4%BD%BF%E7%94%A8yolo-v8%E6%A3%80%E6%B5%8B%E8%A7%86%E9%A2%91%E4%B8%AD%E7%9A%84%E8%80%81%E9%BC%A0/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e创建conda环境 \n    \u003cdiv id=\"%E5%88%9B%E5%BB%BAconda%E7%8E%AF%E5%A2%83\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%88%9B%E5%BB%BAconda%E7%8E%AF%E5%A2%83\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create -n moused \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch2 class=\"relative group\"\u003e进入conda环境 \n    \u003cdiv id=\"%E8%BF%9B%E5%85%A5conda%E7%8E%AF%E5%A2%83\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%BF%9B%E5%85%A5conda%E7%8E%AF%E5%A2%83\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate moused\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch2 class=\"relative group\"\u003e配置环境 \n    \u003cdiv id=\"%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emkdir moused\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e moused\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install ultralytics\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch2 class=\"relative group\"\u003e预测 \n    \u003cdiv id=\"%E9%A2%84%E6%B5%8B\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E9%A2%84%E6%B5%8B\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eyolo detect predict \u003cspan class=\"nv\"\u003emodel\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eyolov8x.pt \u003cspan class=\"nv\"\u003esource\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003emouse.mp4 \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e效果并不好, 需要使用自定义数据集微调.\u003c/p\u003e","title":"使用yolo-v8检测视频中的老鼠","type":"posts"},{"content":" 这是一级标题 # 这是二级标题 # 这是三级标题 # 这是普通文本的段落。你可以通过星号 * 和下划线 _ 来使用 斜体 或 斜体。\n加粗 文本可以使用两个星号 ** 或两个下划线 __ 来实现。\n这是有序列表的第一项 这是有序列表的第二项 这是子列表的第一项 这是子列表的第二项 这是无序列表的第一项 这是无序列表的第二项 这是子列表的第一项 这是子列表的第二项 链接 百度首页\n图片\n图片标题 这是一段引用文本。\n这是一行代码\n这是一个代码块 可以包含多行代码 这是一条水平线\n表头1 表头2 表头3 单元格1 单元格2 单元格3 单元格4 单元格5 单元格6 ","date":"2024-04-07","externalUrl":null,"permalink":"/posts/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003e这是一级标题 \n    \u003cdiv id=\"%E8%BF%99%E6%98%AF%E4%B8%80%E7%BA%A7%E6%A0%87%E9%A2%98\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%BF%99%E6%98%AF%E4%B8%80%E7%BA%A7%E6%A0%87%E9%A2%98\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e这是二级标题 \n    \u003cdiv id=\"%E8%BF%99%E6%98%AF%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%BF%99%E6%98%AF%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e这是三级标题 \n    \u003cdiv id=\"%E8%BF%99%E6%98%AF%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%BF%99%E6%98%AF%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003e这是普通文本的段落。你可以通过星号 * 和下划线 _ 来使用 \u003cem\u003e斜体\u003c/em\u003e 或 \u003cem\u003e斜体\u003c/em\u003e。\u003c/p\u003e","title":"测试文章","type":"posts"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]